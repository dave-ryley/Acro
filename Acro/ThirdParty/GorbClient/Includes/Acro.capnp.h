// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: Acro.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>
#if !CAPNP_LITE
#include <capnp/capability.h>
#endif  // !CAPNP_LITE

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(dde58931968a63e6);
CAPNP_DECLARE_SCHEMA(e52e2a2a280bc0a7);
enum class Status_e52e2a2a280bc0a7: uint16_t {
  UNKNOWN_ERROR,
  OK,
  INTERNAL_ERROR,
  LEVEL_NOT_FOUND,
  LEVEL_ALREADY_EXISTS,
  INVALID_UUID,
  UNIMPLEMENTED,
};
CAPNP_DECLARE_ENUM(Status, e52e2a2a280bc0a7);
CAPNP_DECLARE_SCHEMA(d453c9dfa75636ac);
CAPNP_DECLARE_SCHEMA(ca6d99e31bdeae70);
CAPNP_DECLARE_SCHEMA(bd9eea6b8f0fb311);
CAPNP_DECLARE_SCHEMA(b7eca292ec149193);
CAPNP_DECLARE_SCHEMA(ce250bf6fbe2c4c5);
CAPNP_DECLARE_SCHEMA(f3ad76750f7f0450);
CAPNP_DECLARE_SCHEMA(c6cbb136f491bceb);
CAPNP_DECLARE_SCHEMA(f8fb7fc6072ad651);
CAPNP_DECLARE_SCHEMA(f7783eeaf8c9d0d5);
CAPNP_DECLARE_SCHEMA(84edf9ef6bfa8843);
CAPNP_DECLARE_SCHEMA(f0911239ab6a6336);
CAPNP_DECLARE_SCHEMA(e49bbd46b2e142fc);
CAPNP_DECLARE_SCHEMA(a567ce47d4468c4c);

}  // namespace schemas
}  // namespace capnp


struct Acro {
  Acro() = delete;

#if !CAPNP_LITE
  class Client;
  class Server;
#endif  // !CAPNP_LITE

  typedef ::capnp::schemas::Status_e52e2a2a280bc0a7 Status;

  struct LevelData;
  struct Vector3;
  struct AcroMesh;
  struct LoadGamesParams;
  struct LoadGamesResults;
  struct CreateGameParams;
  struct CreateGameResults;
  struct RemoveGameParams;
  struct RemoveGameResults;
  struct SaveAcroMeshParams;
  struct SaveAcroMeshResults;
  struct LoadAcroMeshesParams;
  struct LoadAcroMeshesResults;

  #if !CAPNP_LITE
  struct _capnpPrivate {
    CAPNP_DECLARE_INTERFACE_HEADER(dde58931968a63e6)
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
  };
  #endif  // !CAPNP_LITE
};

struct Acro::LevelData {
  LevelData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d453c9dfa75636ac, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::Vector3 {
  Vector3() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ca6d99e31bdeae70, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::AcroMesh {
  AcroMesh() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd9eea6b8f0fb311, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::LoadGamesParams {
  LoadGamesParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b7eca292ec149193, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::LoadGamesResults {
  LoadGamesResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ce250bf6fbe2c4c5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::CreateGameParams {
  CreateGameParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3ad76750f7f0450, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::CreateGameResults {
  CreateGameResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c6cbb136f491bceb, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::RemoveGameParams {
  RemoveGameParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f8fb7fc6072ad651, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::RemoveGameResults {
  RemoveGameResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f7783eeaf8c9d0d5, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::SaveAcroMeshParams {
  SaveAcroMeshParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(84edf9ef6bfa8843, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::SaveAcroMeshResults {
  SaveAcroMeshResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f0911239ab6a6336, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::LoadAcroMeshesParams {
  LoadAcroMeshesParams() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e49bbd46b2e142fc, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Acro::LoadAcroMeshesResults {
  LoadAcroMeshesResults() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a567ce47d4468c4c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

#if !CAPNP_LITE
class Acro::Client
    : public virtual ::capnp::Capability::Client {
public:
  typedef Acro Calls;
  typedef Acro Reads;

  Client(decltype(nullptr));
  explicit Client(::kj::Own< ::capnp::ClientHook>&& hook);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Server*>()>>
  Client(::kj::Own<_t>&& server);
  template <typename _t, typename = ::kj::EnableIf< ::kj::canConvert<_t*, Client*>()>>
  Client(::kj::Promise<_t>&& promise);
  Client(::kj::Exception&& exception);
  Client(Client&) = default;
  Client(Client&&) = default;
  Client& operator=(Client& other);
  Client& operator=(Client&& other);

  ::capnp::Request< ::Acro::LoadGamesParams,  ::Acro::LoadGamesResults> loadGamesRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::Acro::CreateGameParams,  ::Acro::CreateGameResults> createGameRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::Acro::RemoveGameParams,  ::Acro::RemoveGameResults> removeGameRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::Acro::SaveAcroMeshParams,  ::Acro::SaveAcroMeshResults> saveAcroMeshRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);
  ::capnp::Request< ::Acro::LoadAcroMeshesParams,  ::Acro::LoadAcroMeshesResults> loadAcroMeshesRequest(
      ::kj::Maybe< ::capnp::MessageSize> sizeHint = nullptr);

protected:
  Client() = default;
};

class Acro::Server
    : public virtual ::capnp::Capability::Server {
public:
  typedef Acro Serves;

  ::kj::Promise<void> dispatchCall(uint64_t interfaceId, uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context)
      override;

protected:
  typedef  ::Acro::LoadGamesParams LoadGamesParams;
  typedef  ::Acro::LoadGamesResults LoadGamesResults;
  typedef ::capnp::CallContext<LoadGamesParams, LoadGamesResults> LoadGamesContext;
  virtual ::kj::Promise<void> loadGames(LoadGamesContext context);
  typedef  ::Acro::CreateGameParams CreateGameParams;
  typedef  ::Acro::CreateGameResults CreateGameResults;
  typedef ::capnp::CallContext<CreateGameParams, CreateGameResults> CreateGameContext;
  virtual ::kj::Promise<void> createGame(CreateGameContext context);
  typedef  ::Acro::RemoveGameParams RemoveGameParams;
  typedef  ::Acro::RemoveGameResults RemoveGameResults;
  typedef ::capnp::CallContext<RemoveGameParams, RemoveGameResults> RemoveGameContext;
  virtual ::kj::Promise<void> removeGame(RemoveGameContext context);
  typedef  ::Acro::SaveAcroMeshParams SaveAcroMeshParams;
  typedef  ::Acro::SaveAcroMeshResults SaveAcroMeshResults;
  typedef ::capnp::CallContext<SaveAcroMeshParams, SaveAcroMeshResults> SaveAcroMeshContext;
  virtual ::kj::Promise<void> saveAcroMesh(SaveAcroMeshContext context);
  typedef  ::Acro::LoadAcroMeshesParams LoadAcroMeshesParams;
  typedef  ::Acro::LoadAcroMeshesResults LoadAcroMeshesResults;
  typedef ::capnp::CallContext<LoadAcroMeshesParams, LoadAcroMeshesResults> LoadAcroMeshesContext;
  virtual ::kj::Promise<void> loadAcroMeshes(LoadAcroMeshesContext context);

  inline  ::Acro::Client thisCap() {
    return ::capnp::Capability::Server::thisCap()
        .template castAs< ::Acro>();
  }

  ::kj::Promise<void> dispatchCallInternal(uint16_t methodId,
      ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context);
};
#endif  // !CAPNP_LITE

class Acro::LevelData::Reader {
public:
  typedef LevelData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUuid() const;
  inline  ::capnp::Text::Reader getUuid() const;

  inline bool hasLevelName() const;
  inline  ::capnp::Text::Reader getLevelName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::LevelData::Builder {
public:
  typedef LevelData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUuid();
  inline  ::capnp::Text::Builder getUuid();
  inline void setUuid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUuid(unsigned int size);
  inline void adoptUuid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUuid();

  inline bool hasLevelName();
  inline  ::capnp::Text::Builder getLevelName();
  inline void setLevelName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLevelName(unsigned int size);
  inline void adoptLevelName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLevelName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::LevelData::Pipeline {
public:
  typedef LevelData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::Vector3::Reader {
public:
  typedef Vector3 Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getX() const;

  inline  ::int16_t getY() const;

  inline  ::int16_t getZ() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::Vector3::Builder {
public:
  typedef Vector3 Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getX();
  inline void setX( ::int16_t value);

  inline  ::int16_t getY();
  inline void setY( ::int16_t value);

  inline  ::int16_t getZ();
  inline void setZ( ::int16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::Vector3::Pipeline {
public:
  typedef Vector3 Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::AcroMesh::Reader {
public:
  typedef AcroMesh Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCenterPositions() const;
  inline  ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>::Reader getCenterPositions() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::AcroMesh::Builder {
public:
  typedef AcroMesh Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCenterPositions();
  inline  ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>::Builder getCenterPositions();
  inline void setCenterPositions( ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>::Builder initCenterPositions(unsigned int size);
  inline void adoptCenterPositions(::capnp::Orphan< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>> disownCenterPositions();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::AcroMesh::Pipeline {
public:
  typedef AcroMesh Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::LoadGamesParams::Reader {
public:
  typedef LoadGamesParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::LoadGamesParams::Builder {
public:
  typedef LoadGamesParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::LoadGamesParams::Pipeline {
public:
  typedef LoadGamesParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::LoadGamesResults::Reader {
public:
  typedef LoadGamesResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus() const;

  inline bool hasLevels() const;
  inline  ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>::Reader getLevels() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::LoadGamesResults::Builder {
public:
  typedef LoadGamesResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus();
  inline void setStatus( ::Acro::Status value);

  inline bool hasLevels();
  inline  ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>::Builder getLevels();
  inline void setLevels( ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>::Builder initLevels(unsigned int size);
  inline void adoptLevels(::capnp::Orphan< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>> disownLevels();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::LoadGamesResults::Pipeline {
public:
  typedef LoadGamesResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::CreateGameParams::Reader {
public:
  typedef CreateGameParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLevel() const;
  inline  ::Acro::LevelData::Reader getLevel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::CreateGameParams::Builder {
public:
  typedef CreateGameParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLevel();
  inline  ::Acro::LevelData::Builder getLevel();
  inline void setLevel( ::Acro::LevelData::Reader value);
  inline  ::Acro::LevelData::Builder initLevel();
  inline void adoptLevel(::capnp::Orphan< ::Acro::LevelData>&& value);
  inline ::capnp::Orphan< ::Acro::LevelData> disownLevel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::CreateGameParams::Pipeline {
public:
  typedef CreateGameParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Acro::LevelData::Pipeline getLevel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::CreateGameResults::Reader {
public:
  typedef CreateGameResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::CreateGameResults::Builder {
public:
  typedef CreateGameResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus();
  inline void setStatus( ::Acro::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::CreateGameResults::Pipeline {
public:
  typedef CreateGameResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::RemoveGameParams::Reader {
public:
  typedef RemoveGameParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLevelUuid() const;
  inline  ::capnp::Text::Reader getLevelUuid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::RemoveGameParams::Builder {
public:
  typedef RemoveGameParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLevelUuid();
  inline  ::capnp::Text::Builder getLevelUuid();
  inline void setLevelUuid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLevelUuid(unsigned int size);
  inline void adoptLevelUuid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLevelUuid();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::RemoveGameParams::Pipeline {
public:
  typedef RemoveGameParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::RemoveGameResults::Reader {
public:
  typedef RemoveGameResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::RemoveGameResults::Builder {
public:
  typedef RemoveGameResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus();
  inline void setStatus( ::Acro::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::RemoveGameResults::Pipeline {
public:
  typedef RemoveGameResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::SaveAcroMeshParams::Reader {
public:
  typedef SaveAcroMeshParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLevelUuid() const;
  inline  ::capnp::Text::Reader getLevelUuid() const;

  inline bool hasMesh() const;
  inline  ::Acro::AcroMesh::Reader getMesh() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::SaveAcroMeshParams::Builder {
public:
  typedef SaveAcroMeshParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLevelUuid();
  inline  ::capnp::Text::Builder getLevelUuid();
  inline void setLevelUuid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLevelUuid(unsigned int size);
  inline void adoptLevelUuid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLevelUuid();

  inline bool hasMesh();
  inline  ::Acro::AcroMesh::Builder getMesh();
  inline void setMesh( ::Acro::AcroMesh::Reader value);
  inline  ::Acro::AcroMesh::Builder initMesh();
  inline void adoptMesh(::capnp::Orphan< ::Acro::AcroMesh>&& value);
  inline ::capnp::Orphan< ::Acro::AcroMesh> disownMesh();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::SaveAcroMeshParams::Pipeline {
public:
  typedef SaveAcroMeshParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::Acro::AcroMesh::Pipeline getMesh();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::SaveAcroMeshResults::Reader {
public:
  typedef SaveAcroMeshResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::SaveAcroMeshResults::Builder {
public:
  typedef SaveAcroMeshResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus();
  inline void setStatus( ::Acro::Status value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::SaveAcroMeshResults::Pipeline {
public:
  typedef SaveAcroMeshResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::LoadAcroMeshesParams::Reader {
public:
  typedef LoadAcroMeshesParams Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLevelUuid() const;
  inline  ::capnp::Text::Reader getLevelUuid() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::LoadAcroMeshesParams::Builder {
public:
  typedef LoadAcroMeshesParams Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLevelUuid();
  inline  ::capnp::Text::Builder getLevelUuid();
  inline void setLevelUuid( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initLevelUuid(unsigned int size);
  inline void adoptLevelUuid(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownLevelUuid();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::LoadAcroMeshesParams::Pipeline {
public:
  typedef LoadAcroMeshesParams Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Acro::LoadAcroMeshesResults::Reader {
public:
  typedef LoadAcroMeshesResults Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus() const;

  inline bool hasMeshes() const;
  inline  ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>::Reader getMeshes() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Acro::LoadAcroMeshesResults::Builder {
public:
  typedef LoadAcroMeshesResults Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Acro::Status getStatus();
  inline void setStatus( ::Acro::Status value);

  inline bool hasMeshes();
  inline  ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>::Builder getMeshes();
  inline void setMeshes( ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>::Builder initMeshes(unsigned int size);
  inline void adoptMeshes(::capnp::Orphan< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>> disownMeshes();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Acro::LoadAcroMeshesResults::Pipeline {
public:
  typedef LoadAcroMeshesResults Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

#if !CAPNP_LITE
inline Acro::Client::Client(decltype(nullptr))
    : ::capnp::Capability::Client(nullptr) {}
inline Acro::Client::Client(
    ::kj::Own< ::capnp::ClientHook>&& hook)
    : ::capnp::Capability::Client(::kj::mv(hook)) {}
template <typename _t, typename>
inline Acro::Client::Client(::kj::Own<_t>&& server)
    : ::capnp::Capability::Client(::kj::mv(server)) {}
template <typename _t, typename>
inline Acro::Client::Client(::kj::Promise<_t>&& promise)
    : ::capnp::Capability::Client(::kj::mv(promise)) {}
inline Acro::Client::Client(::kj::Exception&& exception)
    : ::capnp::Capability::Client(::kj::mv(exception)) {}
inline  ::Acro::Client& Acro::Client::operator=(Client& other) {
  ::capnp::Capability::Client::operator=(other);
  return *this;
}
inline  ::Acro::Client& Acro::Client::operator=(Client&& other) {
  ::capnp::Capability::Client::operator=(kj::mv(other));
  return *this;
}

#endif  // !CAPNP_LITE
inline bool Acro::LevelData::Reader::hasUuid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::LevelData::Builder::hasUuid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Acro::LevelData::Reader::getUuid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Acro::LevelData::Builder::getUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Acro::LevelData::Builder::setUuid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Acro::LevelData::Builder::initUuid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Acro::LevelData::Builder::adoptUuid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Acro::LevelData::Builder::disownUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Acro::LevelData::Reader::hasLevelName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::LevelData::Builder::hasLevelName() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Acro::LevelData::Reader::getLevelName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Acro::LevelData::Builder::getLevelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Acro::LevelData::Builder::setLevelName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Acro::LevelData::Builder::initLevelName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Acro::LevelData::Builder::adoptLevelName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Acro::LevelData::Builder::disownLevelName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int16_t Acro::Vector3::Reader::getX() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Acro::Vector3::Builder::getX() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Acro::Vector3::Builder::setX( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Acro::Vector3::Reader::getY() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Acro::Vector3::Builder::getY() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Acro::Vector3::Builder::setY( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t Acro::Vector3::Reader::getZ() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t Acro::Vector3::Builder::getZ() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Acro::Vector3::Builder::setZ( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool Acro::AcroMesh::Reader::hasCenterPositions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::AcroMesh::Builder::hasCenterPositions() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>::Reader Acro::AcroMesh::Reader::getCenterPositions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>::Builder Acro::AcroMesh::Builder::getCenterPositions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Acro::AcroMesh::Builder::setCenterPositions( ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>::Builder Acro::AcroMesh::Builder::initCenterPositions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Acro::AcroMesh::Builder::adoptCenterPositions(
    ::capnp::Orphan< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>> Acro::AcroMesh::Builder::disownCenterPositions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::Vector3,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::Acro::Status Acro::LoadGamesResults::Reader::getStatus() const {
  return _reader.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::Acro::Status Acro::LoadGamesResults::Builder::getStatus() {
  return _builder.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Acro::LoadGamesResults::Builder::setStatus( ::Acro::Status value) {
  _builder.setDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Acro::LoadGamesResults::Reader::hasLevels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::LoadGamesResults::Builder::hasLevels() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>::Reader Acro::LoadGamesResults::Reader::getLevels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>::Builder Acro::LoadGamesResults::Builder::getLevels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Acro::LoadGamesResults::Builder::setLevels( ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>::Builder Acro::LoadGamesResults::Builder::initLevels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Acro::LoadGamesResults::Builder::adoptLevels(
    ::capnp::Orphan< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>> Acro::LoadGamesResults::Builder::disownLevels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::LevelData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Acro::CreateGameParams::Reader::hasLevel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::CreateGameParams::Builder::hasLevel() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Acro::LevelData::Reader Acro::CreateGameParams::Reader::getLevel() const {
  return ::capnp::_::PointerHelpers< ::Acro::LevelData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Acro::LevelData::Builder Acro::CreateGameParams::Builder::getLevel() {
  return ::capnp::_::PointerHelpers< ::Acro::LevelData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Acro::LevelData::Pipeline Acro::CreateGameParams::Pipeline::getLevel() {
  return  ::Acro::LevelData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void Acro::CreateGameParams::Builder::setLevel( ::Acro::LevelData::Reader value) {
  ::capnp::_::PointerHelpers< ::Acro::LevelData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Acro::LevelData::Builder Acro::CreateGameParams::Builder::initLevel() {
  return ::capnp::_::PointerHelpers< ::Acro::LevelData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Acro::CreateGameParams::Builder::adoptLevel(
    ::capnp::Orphan< ::Acro::LevelData>&& value) {
  ::capnp::_::PointerHelpers< ::Acro::LevelData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Acro::LevelData> Acro::CreateGameParams::Builder::disownLevel() {
  return ::capnp::_::PointerHelpers< ::Acro::LevelData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::Acro::Status Acro::CreateGameResults::Reader::getStatus() const {
  return _reader.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::Acro::Status Acro::CreateGameResults::Builder::getStatus() {
  return _builder.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Acro::CreateGameResults::Builder::setStatus( ::Acro::Status value) {
  _builder.setDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Acro::RemoveGameParams::Reader::hasLevelUuid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::RemoveGameParams::Builder::hasLevelUuid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Acro::RemoveGameParams::Reader::getLevelUuid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Acro::RemoveGameParams::Builder::getLevelUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Acro::RemoveGameParams::Builder::setLevelUuid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Acro::RemoveGameParams::Builder::initLevelUuid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Acro::RemoveGameParams::Builder::adoptLevelUuid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Acro::RemoveGameParams::Builder::disownLevelUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::Acro::Status Acro::RemoveGameResults::Reader::getStatus() const {
  return _reader.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::Acro::Status Acro::RemoveGameResults::Builder::getStatus() {
  return _builder.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Acro::RemoveGameResults::Builder::setStatus( ::Acro::Status value) {
  _builder.setDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Acro::SaveAcroMeshParams::Reader::hasLevelUuid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::SaveAcroMeshParams::Builder::hasLevelUuid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Acro::SaveAcroMeshParams::Reader::getLevelUuid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Acro::SaveAcroMeshParams::Builder::getLevelUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Acro::SaveAcroMeshParams::Builder::setLevelUuid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Acro::SaveAcroMeshParams::Builder::initLevelUuid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Acro::SaveAcroMeshParams::Builder::adoptLevelUuid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Acro::SaveAcroMeshParams::Builder::disownLevelUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Acro::SaveAcroMeshParams::Reader::hasMesh() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::SaveAcroMeshParams::Builder::hasMesh() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::Acro::AcroMesh::Reader Acro::SaveAcroMeshParams::Reader::getMesh() const {
  return ::capnp::_::PointerHelpers< ::Acro::AcroMesh>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::Acro::AcroMesh::Builder Acro::SaveAcroMeshParams::Builder::getMesh() {
  return ::capnp::_::PointerHelpers< ::Acro::AcroMesh>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::Acro::AcroMesh::Pipeline Acro::SaveAcroMeshParams::Pipeline::getMesh() {
  return  ::Acro::AcroMesh::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Acro::SaveAcroMeshParams::Builder::setMesh( ::Acro::AcroMesh::Reader value) {
  ::capnp::_::PointerHelpers< ::Acro::AcroMesh>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::Acro::AcroMesh::Builder Acro::SaveAcroMeshParams::Builder::initMesh() {
  return ::capnp::_::PointerHelpers< ::Acro::AcroMesh>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Acro::SaveAcroMeshParams::Builder::adoptMesh(
    ::capnp::Orphan< ::Acro::AcroMesh>&& value) {
  ::capnp::_::PointerHelpers< ::Acro::AcroMesh>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Acro::AcroMesh> Acro::SaveAcroMeshParams::Builder::disownMesh() {
  return ::capnp::_::PointerHelpers< ::Acro::AcroMesh>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::Acro::Status Acro::SaveAcroMeshResults::Reader::getStatus() const {
  return _reader.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::Acro::Status Acro::SaveAcroMeshResults::Builder::getStatus() {
  return _builder.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Acro::SaveAcroMeshResults::Builder::setStatus( ::Acro::Status value) {
  _builder.setDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Acro::LoadAcroMeshesParams::Reader::hasLevelUuid() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::LoadAcroMeshesParams::Builder::hasLevelUuid() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Acro::LoadAcroMeshesParams::Reader::getLevelUuid() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Acro::LoadAcroMeshesParams::Builder::getLevelUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Acro::LoadAcroMeshesParams::Builder::setLevelUuid( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Acro::LoadAcroMeshesParams::Builder::initLevelUuid(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Acro::LoadAcroMeshesParams::Builder::adoptLevelUuid(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Acro::LoadAcroMeshesParams::Builder::disownLevelUuid() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::Acro::Status Acro::LoadAcroMeshesResults::Reader::getStatus() const {
  return _reader.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::Acro::Status Acro::LoadAcroMeshesResults::Builder::getStatus() {
  return _builder.getDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Acro::LoadAcroMeshesResults::Builder::setStatus( ::Acro::Status value) {
  _builder.setDataField< ::Acro::Status>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Acro::LoadAcroMeshesResults::Reader::hasMeshes() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Acro::LoadAcroMeshesResults::Builder::hasMeshes() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>::Reader Acro::LoadAcroMeshesResults::Reader::getMeshes() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>::Builder Acro::LoadAcroMeshesResults::Builder::getMeshes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Acro::LoadAcroMeshesResults::Builder::setMeshes( ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>::Builder Acro::LoadAcroMeshesResults::Builder::initMeshes(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Acro::LoadAcroMeshesResults::Builder::adoptMeshes(
    ::capnp::Orphan< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>> Acro::LoadAcroMeshesResults::Builder::disownMeshes() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Acro::AcroMesh,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


